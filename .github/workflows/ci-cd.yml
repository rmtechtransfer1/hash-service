
name: CI with Centralized Security Setup

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
    paths-ignore:
      - 'Kubernetes/**'
      - 'Docker/**'
      - 'security_compliance/policy/**'
      - '.github/workflows/policy-check.yml'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'Kubernetes/**'
      - 'Docker/**'
      - 'security_compliance/policy/**'
      - '.github/workflows/policy-check.yml'

permissions:
  contents: read
  packages: write
  id-token: write
  actions: read
  security-events: write

env:
  BUILD_TYPE: Release
  IMAGE_NAME: ghcr.io/okbobm/hash-service

jobs:
  # Step 1: C++ Security with centralized setup
  cpp-security:
    uses: rmtechtransfer1/github-actions-security/.github/workflows/cmake-security.yml@main
    with:
      build-type: Release
      source-dir: '.'
      build-dir: 'build'
      cmake-args: '-G Ninja'
      upload-artifacts: true

    permissions:
      contents: read
      security-events: write

  # Step 2: Python Security with centralized setup
  python-security:
    uses: rmtechtransfer1/github-actions-security/.github/workflows/python-security.yml@main
    with:
      python-version: '3.11'
      source-dir: 'service'
      requirements-file: 'service/requirements.txt'
      test-dir: 'service/tests'
      bandit-severity: 'll'
      fail-on-security-issues: true
    permissions:
      contents: read
      security-events: write

  # Step 3: Bandit Code Scanning
  bandit-code-scanning:
    uses: rmtechtransfer1/github-actions-security/.github/workflows/bandit-code-scanning.yml@main
    with:
      scan-path: 'service/'
      confidence-level: 'high'
      severity-level: 'high'
      exclude-paths: 'service/tests,service/.venv'
      upload-sarif: true
    permissions:
      contents: read
      security-events: write
      actions: read

  # Step 4: Prepare and validate outputs
  prepare-artifacts:
    needs: [cpp-security, python-security, bandit-code-scanning]
    runs-on: ubuntu-latest
    outputs:
      cpp-artifact-name: ${{ steps.validate.outputs.cpp-artifact-name }}
      cpp-build-dir: ${{ steps.validate.outputs.cpp-build-dir }}
      all-scans-passed: ${{ steps.validate.outputs.all-scans-passed }}

    steps:
    - name: Validate outputs
      id: validate
      run: |
        # Same validation logic as before
        CPP_ARTIFACT="${{ needs.cpp-security.outputs.artifact-name }}"
        if [ -z "$CPP_ARTIFACT" ] || [ "$CPP_ARTIFACT" = "null" ]; then
          CPP_ARTIFACT="cmake-build-${{ github.run_number }}"
        fi
        echo "cpp-artifact-name=$CPP_ARTIFACT" >> "$GITHUB_OUTPUT"
        # ... rest of validation logic

